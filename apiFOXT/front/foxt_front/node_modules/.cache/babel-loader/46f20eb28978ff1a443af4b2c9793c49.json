{"ast":null,"code":"var _jsxFileName = \"/var/www/FOXT/apiFOXT/front/foxt_front/src/Components/Calendrier/Calendrier.js\";\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class DemoApp extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      weekendsVisible: false,\n      currentEvents: []\n    };\n\n    this.handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n\n    this.renderEventContent = eventInfo => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: eventInfo.timeText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          children: eventInfo.event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-main\",\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n          headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n          },\n          initialView: \"timeGridWeek\",\n          editable: true,\n          selectable: true,\n          selectMirror: true,\n          dayMaxEvents: true,\n          weekends: this.state.weekendsVisible,\n          initialEvents: INITIAL_EVENTS,\n          select: this.handleDateSelect,\n          eventContent: this.renderEventContent // custom render function\n          //eventClick={this.handleEventClick}\n          ,\n          eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n          /* you can update a remote database when these fire:\n          eventAdd={function(){}}\n          eventChange={function(){}}\n          eventRemove={function(){}}\n          */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/var/www/FOXT/apiFOXT/front/foxt_front/src/Components/Calendrier/Calendrier.js"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","DemoApp","Component","state","weekendsVisible","currentEvents","handleWeekendsToggle","setState","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","handleEvents","events","renderEventContent","eventInfo","timeText","event","render","left","center","right"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,eAA9C;;;AAEA,eAAe,MAAMC,OAAN,SAAsBR,KAAK,CAACS,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAEnDC,KAFmD,GAE3C;AACNC,MAAAA,eAAe,EAAE,KADX;AAENC,MAAAA,aAAa,EAAE;AAFT,KAF2C;;AAAA,SAQnDC,oBARmD,GAQ5B,MAAM;AAC3B,WAAKC,QAAL,CAAc;AACZH,QAAAA,eAAe,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADjB,OAAd;AAGD,KAZkD;;AAAA,SAcnDI,gBAdmD,GAc/BC,UAAD,IAAgB;AACjC,UAAIC,KAAK,GAAGC,MAAM,CAAC,yCAAD,CAAlB;AACA,UAAIC,WAAW,GAAGH,UAAU,CAACI,IAAX,CAAgBC,QAAlC;AAEAF,MAAAA,WAAW,CAACG,QAAZ,GAJiC,CAIV;;AAEvB,UAAIL,KAAJ,EAAW;AACTE,QAAAA,WAAW,CAACI,QAAZ,CAAqB;AACnBC,UAAAA,EAAE,EAAEjB,aAAa,EADE;AAEnBU,UAAAA,KAFmB;AAGnBQ,UAAAA,KAAK,EAAET,UAAU,CAACU,QAHC;AAInBC,UAAAA,GAAG,EAAEX,UAAU,CAACY,MAJG;AAKnBC,UAAAA,MAAM,EAAEb,UAAU,CAACa;AALA,SAArB;AAOD;AACF,KA7BkD;;AAAA,SAqCnDC,YArCmD,GAqCnCC,MAAD,IAAY;AACzB,WAAKjB,QAAL,CAAc;AACZF,QAAAA,aAAa,EAAEmB;AADH,OAAd;AAGD,KAzCkD;;AAAA,SA4CnDC,kBA5CmD,GA4C7BC,SAAD,IAAe;AAClC,0BACE;AAAA,gCACE;AAAA,oBAAIA,SAAS,CAACC;AAAd;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAID,SAAS,CAACE,KAAV,CAAgBlB;AAApB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBADF;AAMD,KAnDkD;AAAA;;AAoDnDmB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACE,QAAC,YAAD;AACE,UAAA,OAAO,EAAE,CAACjC,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CADX;AAEE,UAAA,aAAa,EAAE;AACbgC,YAAAA,IAAI,EAAE,iBADO;AAEbC,YAAAA,MAAM,EAAE,OAFK;AAGbC,YAAAA,KAAK,EAAE;AAHM,WAFjB;AAOE,UAAA,WAAW,EAAC,cAPd;AAQE,UAAA,QAAQ,EAAE,IARZ;AASE,UAAA,UAAU,EAAE,IATd;AAUE,UAAA,YAAY,EAAE,IAVhB;AAWE,UAAA,YAAY,EAAE,IAXhB;AAYE,UAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWC,eAZvB;AAaE,UAAA,aAAa,EAAEL,cAbjB;AAcE,UAAA,MAAM,EAAE,KAAKS,gBAdf;AAeE,UAAA,YAAY,EAAE,KAAKiB,kBAfrB,CAeyC;AACvC;AAhBF;AAiBE,UAAA,SAAS,EAAE,KAAKF,YAjBlB,CAiBgC;;AAC9B;AACZ;AACA;AACA;AACA;;AAtBU;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA8BD;;AAnFkD","sourcesContent":["import React from 'react'\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\n\nexport default class DemoApp extends React.Component {\n\n  state = {\n    weekendsVisible: false,\n    currentEvents: []\n  }\n\n  \n  handleWeekendsToggle = () => {\n    this.setState({\n      weekendsVisible: !this.state.weekendsVisible\n    })\n  }\n\n  handleDateSelect = (selectInfo) => {\n    let title = prompt('Please enter a new title for your event')\n    let calendarApi = selectInfo.view.calendar\n\n    calendarApi.unselect() // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay\n      })\n    }\n  }\n\n//   handleEventClick = (clickInfo) => {\n//     if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n//       clickInfo.event.remove()\n//     }\n//   }\n\n  handleEvents = (events) => {\n    this.setState({\n      currentEvents: events\n    })\n  }\n\n  \n  renderEventContent = (eventInfo) => {\n    return (\n      <>\n        <b>{eventInfo.timeText}</b>\n        <i>{eventInfo.event.title}</i>\n      </>\n    )\n  }\n  render() {\n    return (\n      <div className='demo-app'>\n        <div className='demo-app-main'>\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\n            }}\n            initialView='timeGridWeek'\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            weekends={this.state.weekendsVisible}\n            initialEvents={INITIAL_EVENTS} \n            select={this.handleDateSelect}\n            eventContent={this.renderEventContent} // custom render function\n            //eventClick={this.handleEventClick}\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n          />\n        </div>\n      </div>\n    )\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}